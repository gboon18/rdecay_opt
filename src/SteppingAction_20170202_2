//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
/// \file SteppingAction.cc
/// \brief Implementation of the SteppingAction class
//
// $Id: SteppingAction.cc 71404 2013-06-14 16:56:38Z maire $
// 
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

#include "SteppingAction.hh"

#include "DetectorConstruction.hh"
#include "Run.hh"
#include "EventAction.hh"
#include "HistoManager.hh"

#include "G4RunManager.hh"
#include "G4SystemOfUnits.hh"
#include "G4UnitsTable.hh"

//////added 20170131//////
#include "G4ThreeVector.hh"
#include "G4Track.hh"//for G4Track
//////////////////////////
//////added 20170202////////to get the trajectory number
#include "G4VTrajectory.hh"
#include "G4VTrajectoryPoint.hh"
//////////////////////////

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

SteppingAction::SteppingAction(DetectorConstruction* det, EventAction* event)
: G4UserSteppingAction(), fDetector(det), fEventAction(event)
{ }

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

SteppingAction::~SteppingAction()
{ }

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void SteppingAction::UserSteppingAction(const G4Step* aStep)
{
  Run* run = static_cast<Run*>(
			       G4RunManager::GetRunManager()->GetNonConstCurrentRun());    
  
  G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();

  //which volume ?
  //
  G4LogicalVolume* lVolume = aStep->GetPreStepPoint()->GetTouchableHandle()
    ->GetVolume()->GetLogicalVolume();
  G4int iVol = 0;
  if (lVolume == fDetector->GetLogicTarget())   iVol = 1;
  if (lVolume == fDetector->GetLogicDetector()) iVol = 2;

  // count processes
  // 
  const G4StepPoint* endPoint = aStep->GetPostStepPoint();
  const G4VProcess* process   = endPoint->GetProcessDefinedStep();
  run->CountProcesses(process, iVol);
  
  // energy deposit
  //
  G4double edepStep = aStep->GetTotalEnergyDeposit();
  if (edepStep <= 0.) return;
  G4double time   = aStep->GetPreStepPoint()->GetGlobalTime();
  G4double weight = aStep->GetPreStepPoint()->GetWeight();   
  fEventAction->AddEdep(iVol, edepStep, time, weight);
  
  //fill ntuple id = 2
  G4int id = 2;   
  analysisManager->FillNtupleDColumn(id,0, edepStep);
  analysisManager->FillNtupleDColumn(id,1, time/s);
  analysisManager->FillNtupleDColumn(id,2, weight);
  analysisManager->AddNtupleRow(id);      

  ///////////////////////////////////////////////////20170131 to make each detector work( not really, saves all the data, not separately)
  G4Track* track = aStep->GetTrack();
  G4String testc = track->GetLogicalVolumeAtVertex()->GetName();
  G4int trackID = track->GetTrackID();
  G4int StepNo = track->GetCurrentStepNumber();

  G4ThreeVector position = track->GetPosition();
  G4ThreeVector momentum = track->GetMomentum();


  //from TrackingAction.cc 20170201/////////////////////////////////////////
  const G4ParticleDefinition* particle = track->GetParticleDefinition();//this "track" is actually from const "G4Track* track" in TrackingAction.cc  
  G4String name   = particle->GetParticleName();
  G4int pid       = particle->GetPDGEncoding();
  G4int Z         = particle->GetAtomicNumber();
  G4int A         = particle->GetAtomicMass();
  G4double energy = track->GetKineticEnergy();
  ///////////////////////////////////////////////////////////////////////////
  
  ///20170202 get trajectory////////////////////////////

  G4VTrajectory* trajectory = 0;
  G4int endP = trajectory->GetPointEntries() -1;
  G4VTrajectoryPoint* point0 = trajectory->GetPoint(0);
  G4VTrajectoryPoint* pointa = trajectory->GetPoint(endP);
  
  G4ThreeVector position0 = point0->GetPosition();
  G4ThreeVector positiona = pointa->GetPosition();

  /////////////////////////////////////////////////////
  
  id = 4;
  analysisManager->FillNtupleDColumn(id,0, double(pid));
  analysisManager->FillNtupleDColumn(id,1, double(Z));
  analysisManager->FillNtupleDColumn(id,2, double(A));
  analysisManager->FillNtupleDColumn(id,3, energy);
  analysisManager->FillNtupleDColumn(id,4, time/s);
  analysisManager->FillNtupleDColumn(id,5, position.x());
  analysisManager->FillNtupleDColumn(id,6, position.y());
  analysisManager->FillNtupleDColumn(id,7, position.z());
  analysisManager->FillNtupleDColumn(id,8,  momentum.x());
  analysisManager->FillNtupleDColumn(id,9,  momentum.y());
  analysisManager->FillNtupleDColumn(id,10, momentum.z());
  analysisManager->FillNtupleDColumn(id,11, trackID);
  analysisManager->FillNtupleDColumn(id,12, StepNo);
  //analysisManager->FillNtupleDColumn(id,13, testc);//this is not how you use it. "testc" is to check whether the particle is in the volume we are interested in or not.
  //analysisManager->FillNtupleDColumn(id,14, weight);
  analysisManager->FillNtupleDColumn(id,13, weight);
  
  analysisManager->FillNtupleDColumn(id,14, position0.x());
  analysisManager->FillNtupleDColumn(id,15, position0.y());
  analysisManager->FillNtupleDColumn(id,16, position0.z());
  
  analysisManager->AddNtupleRow(id);



  ///////////////////////////////////////////////////20170201 to make each detector work

  G4StepPoint *point1 = aStep->GetPreStepPoint();
  G4TouchableHandle touch1 = point1->GetTouchableHandle();
  G4VPhysicalVolume *volume1 = touch1->GetVolume();
  G4int CopyNo = point1->GetTouchableHandle()->GetCopyNumber();
  /* 
     G4StepPoint *point2 = aStep->GetPostStepPoint();
     G4TouchableHandle touch2 = point2->GetTouchableHandle();    
     G4VPhysicalVolume *volume2 = touch2->GetVolume();
  */ //save it for later
  /*
    G4TouchableHandle touch2 = endPoint->GetTouchableHandle();//already "point2" exist as "endPoint"    
    G4VPhysicalVolume *volume2 = touch2->GetVolume();
  */
  G4TouchableHandle touch2 = endPoint->GetTouchableHandle();
  G4VPhysicalVolume *volume2 = touch2->GetVolume();
  G4int CopyNo2 = endPoint->GetTouchableHandle()->GetCopyNumber();


  //  if (!volume1) G4cout << "No?" << G4endl;
  //  if (!volume2) G4cout << "No2?" << G4endl;
  //    G4cout << volume1->GetName() << G4endl;
  //    G4cout << volume2->GetName() << G4endl;
    
  if((volume1->GetName()=="s_crystal")){ 

    id = 5;
         analysisManager->FillNtupleDColumn(id,0, double(pid));
	 analysisManager->FillNtupleDColumn(id,1, double(Z));
	 analysisManager->FillNtupleDColumn(id,2, double(A));
	 analysisManager->FillNtupleDColumn(id,3, energy);
	 analysisManager->FillNtupleDColumn(id,4, time/s);
	 analysisManager->FillNtupleDColumn(id,5, position.x());
	 analysisManager->FillNtupleDColumn(id,6, position.y());
	 analysisManager->FillNtupleDColumn(id,7, position.z());
	 analysisManager->FillNtupleDColumn(id,8,  momentum.x());
	 analysisManager->FillNtupleDColumn(id,9,  momentum.y());
	 analysisManager->FillNtupleDColumn(id,10, momentum.z());
	 analysisManager->FillNtupleDColumn(id,11, trackID);
	 analysisManager->FillNtupleDColumn(id,12, StepNo);
	 analysisManager->FillNtupleDColumn(id,13, weight);
	 analysisManager->FillNtupleDColumn(id,14, CopyNo);
       
       analysisManager->AddNtupleRow(id);
  }


  if((volume1->GetName()=="Target")){ //for the target 20170201

    id = 6;
       analysisManager->FillNtupleDColumn(id,0, double(pid));
       analysisManager->FillNtupleDColumn(id,1, double(Z));
       analysisManager->FillNtupleDColumn(id,2, double(A));
       analysisManager->FillNtupleDColumn(id,3, energy);
       analysisManager->FillNtupleDColumn(id,4, time/s);
       analysisManager->FillNtupleDColumn(id,5, position.x());
       analysisManager->FillNtupleDColumn(id,6, position.y());
       analysisManager->FillNtupleDColumn(id,7, position.z());
       analysisManager->FillNtupleDColumn(id,8,  momentum.x());
       analysisManager->FillNtupleDColumn(id,9,  momentum.y());
       analysisManager->FillNtupleDColumn(id,10, momentum.z());
       analysisManager->FillNtupleDColumn(id,11, trackID);
       analysisManager->FillNtupleDColumn(id,12, StepNo);
       analysisManager->FillNtupleDColumn(id,13, weight);
       analysisManager->FillNtupleDColumn(id,14, CopyNo);
       analysisManager->AddNtupleRow(id);
  }

    
      
  if(volume2 && (volume2->GetName()=="s_crystal")){ //the "volume2 &&" is added 20170202; if volume2 is null(out of the world) the if loop is not activated. 
      
    id = 7;
    analysisManager->FillNtupleDColumn(id,0, double(pid));
    analysisManager->FillNtupleDColumn(id,1, double(Z));
    analysisManager->FillNtupleDColumn(id,2, double(A));
    analysisManager->FillNtupleDColumn(id,3, energy);
    analysisManager->FillNtupleDColumn(id,4, time/s);
    analysisManager->FillNtupleDColumn(id,5, position.x());
    analysisManager->FillNtupleDColumn(id,6, position.y());
    analysisManager->FillNtupleDColumn(id,7, position.z());
    analysisManager->FillNtupleDColumn(id,8,  momentum.x());
    analysisManager->FillNtupleDColumn(id,9,  momentum.y());
    analysisManager->FillNtupleDColumn(id,10, momentum.z());
    analysisManager->FillNtupleDColumn(id,11, trackID);
    analysisManager->FillNtupleDColumn(id,12, StepNo);
    analysisManager->FillNtupleDColumn(id,13, weight);
    analysisManager->FillNtupleDColumn(id,14, CopyNo2);

    
    analysisManager->AddNtupleRow(id);
      
    // G4cout<<"fuck me"<<G4endl;
  }
    
    
  if(volume2 && (volume2->GetName()=="Target")){ //for the target 20170201

    id = 8;
    analysisManager->FillNtupleDColumn(id,0, double(pid));
    analysisManager->FillNtupleDColumn(id,1, double(Z));
    analysisManager->FillNtupleDColumn(id,2, double(A));
    analysisManager->FillNtupleDColumn(id,3, energy);
    analysisManager->FillNtupleDColumn(id,4, time/s);
    analysisManager->FillNtupleDColumn(id,5, position.x());
    analysisManager->FillNtupleDColumn(id,6, position.y());
    analysisManager->FillNtupleDColumn(id,7, position.z());
    analysisManager->FillNtupleDColumn(id,8,  momentum.x());
    analysisManager->FillNtupleDColumn(id,9,  momentum.y());
    analysisManager->FillNtupleDColumn(id,10, momentum.z());
    analysisManager->FillNtupleDColumn(id,11, trackID);
    analysisManager->FillNtupleDColumn(id,12, StepNo);
    analysisManager->FillNtupleDColumn(id,13, weight);
    analysisManager->FillNtupleDColumn(id,14, CopyNo2);
    analysisManager->AddNtupleRow(id);
  }
    
  
}
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
